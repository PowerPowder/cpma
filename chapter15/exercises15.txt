2.  Which of the following should not be put into a header file and why?
    a) Function prototypes - should be
    b) Function definitions - should not be because function definitions are evaluated after
                              preprocessing.
    c) Macro definitions - should be
    d) Type definitions - should be

3.  Will there be a problem if #include "file" happens before #include <file> if file is a system
    header?
    No, it seems to check the current user directory, then if nothing is there with the right name
    it checks all the system headers.

4.  debug.h:
    #ifdef DEBUG
    #define PRINT_DEBUG(n) printf("Value of " #n ": %d\n", n)
    #else
    #define PRINT_DEBUG(n)
    #endif

    testdebug.c: 
    #include <stdio.h>

    #define DEBUG
    #include "debug.h"

    int main(void)
    {
        int i = 1, j = 2, k = 3;
    
    #ifdef DEBUG
        printf("Output if DEBUG is defined:\n");
    #else
        printf("Output if DEBUG is not defined:\n");
    #endif
        PRINT_DEBUG(i);
        PRINT_DEBUG(j);
        PRINT_DEBUG(k);
        PRINT_DEBUG(i + j);
        PRINT_DEBUG(2 * i + j - k);

        return 0;
    }

    a) output of program:
        Output if DEBUG is defined:
        Value of i: 1
        Value of j: 2
        Value of k: 3
        Value of i + j: 3
        Value of 2 * i + j - k: 1
    b) output if #define is removed from testdebug.c
        Output if DEBUG is not defined:
    c) For 'a' PRINT_DEBUG is a macro to a call of printf that prints the value of it's parameter.
       For 'b'PRINT_DEBUG is a macro that does nothing. 
    d) Is it necessary to have '#define DEBUG' before '#include "debug.h"'?
        Yes it is because when the preprocessor includes debug.h, it sees that DEBUG is not defined,
        so it defines PRINT_DEBUG to do nothing.
1.  i is a var, p is a pointer to i, which are aliases for i:
    a) *p is an alias
    b) &p is not an alias
    c) *&p is not an alias
    d) &*p is not an alias
    e) *i is not an alias
    f) &i is not an alias
    g) *&i is an alias
    h) &*i is not an alias

2.  If i is an int variable and p and q are pointers to int, which of the following assignments are legal?
    a) p = i;       legal
    b) *p = &i;     legal
    c) &p = q;      illegal
    d) p = &q;      legal
    e) p = *&q;     legal
    f) p = q;       legal
    g) p = *q;      legal
    h) *p = q;      legal
    i) *p = *q;     legal

3.  void avg_sum(double a[], int n, double *avg, double *sum)
    {
        int i;

        *sum = 0.0;
        for (i = 0; i < n; i++)
            *sum += a[i];
        *avg = *sum / n;
    }

4.  void swap(int *p, int *q)
    {
        int temp = *p;
        *p = *q;
        *q = temp;
    }

5.  void split_time(long total_sec, int *hr, int *min, int *sec)
    {
        *hr = total_sec / 3600;
        *min = (total_sec - *hr * 3600) / 60;
        *sec = total_sec % 60;
    }

6.  void find_two_largest(int a[], int n, int *largest, int *second_largest)
    {
        *largest = a[0];
        *second_largest = a[0];

        for (int i = 0; i < n; i++)
            if (a[i] > *largest)
                *largest = a[i];

        for (int i = 0; i < n; i++)
            if (a[i] > *second_largest && a[i] < *largest)
                *second_largest = a[i];
    }

7.  void split_date(int day_of_year, int year, int *month, int *day)
    {
        int m, days_in_month;
        for (m = 1; m <= 12; m++)
        {
            switch (m)
            {
                case 2:
                    days_in_month = (year % 4 == 0 ? 29 : 28);
                    break;
                case 4: case 6: case 9: case 11:
                    days_in_month = 30;
                    break;
                default:
                    days_in_month = 31;
                    break;
            }

            if (day_of_year - days_in_month > 0)
                day_of_year -= days_in_month;
            else
                break;
        }

        *month = m;
        *day = day_of_year;
    }

8.  int *find_largest(int a[], int n)
    {
        int largest_el = 0;
        int largest = a[0];

        for (int i = 0; i < n; i++)
        {
            if (a[i] > largest)
            {
                largest_el = i;
                largest = a[i];
            }
        }

        return &a[largest_el];
    }
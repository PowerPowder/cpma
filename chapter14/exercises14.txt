1.  Write macros to compute the values:
    a) cube of x
        #define CUBE(x) ((x)*(x)*(x))
    b) remainder of n when divided by 4
        #define REM(n) ((n) % 4)
    c) 1 if x+y is less than 100, 0 otherwise
        #define PROD(x, y) (((x)+(y)) < 100 ? 1 : 0)

2.  Write a macro that gets the number of elements in a one-dimensional array:
    #define NELEMS(a) (int)((a) / sizeof((a)))

3.  #define DOUBLE(x) 2*x
    a) DOUBLE(1+2) -> 2*1+2 -> 2+2 -> 4
    b) 4/DOUBLE(2) -> 4/2*2 -> 2*2 -> 4
    c) Fix DOUBLE:
        #define DOUBLE(x) (2*(x))

4.  Give an example and fix the following macros:
    a) #define AVG(x,y)   (x+y)/2
        AVG(1+2, 2+3)  -> 1+2+2+3/2 -> 1+2+2+1 -> 6, should be 4
        #define AVG(x,y) ((x)+(y)/2)
    b) #define AREA(x,y)  (x)*(y)
        AREA(1+2, 2+3) -> 1+2*2+3 -> 1+4+3 -> 8, should be 15
        #define AREA(x,y) ((x)*(y))

5.  #define TOUPPER(c) ('a'<=(c)&&(c)<='z'?(c)-'a'+'A':(c))
    a)  strcpy(s, "abcd");
        i = 0;
        putchar(TOUPPER(s[++i]));

        s = "abcd", i = 0, TOUPPER(s[1])
        ('a' <= 'b' && 'b' <= 'z' ? 'b' - 'a' + 'A' : 'b')
        output: B

    b)  strcpy(s, "0123");
        i = 0;
        putchar(TOUPPER(s[++i]));

        s = "0123", i = 0, TOUPPER(s[1])
        ('a' <= '1' && '1' <= 'z' ? '1' - 'a' + 'A' : '1')
        output: 1

6.  Write a macro called DISP where f is the function, x is a value and y is a value:
    a) DISP(f,x)
        #define DISP(f,x) printf(#f "(%g) = %g\n", x, f(x));
    b) DISP2(f,x,y)
        #define DISP2(f,x,y) printf(#f "(%g, %g) = %g\n", x, y, f(x, y));

7.  #define GENERIC_MAX(type)       \
    type type##_max(type x, type y) \
    {                               \
        return x > y ? x : y;       \
    }

    a) expansion of GENERIC_MAX(long):
        long long_max(long x, long y)
        {
            return x > y ? x : y;
        }
    b) why doesn't GENERIC_MAX work for unsigned long.
        when expanded it is: unsigned long unsigned long_max(unsigned ...)
        there is a space in unsigned long which 'unsigned' is read as the function name and will
        complain about that.
    c) a technique to make unsigned long work is to have a separate parameter for the name of the
       function, eg. GENERIC_MAX(unsigned long, ulong)

8.  Write a macro that expands as: 
    const char *str = LINE_FILE; -> const char *str = "Line 10 of file foo.c"
    
    #define STR_HELPER(x) #x
    #define STR(x) STR_HELPER(x)
    #define LINE_FILE "Line " STR(__LINE__) " of file " __FILE__

9.  Write the following macros:
    a) CHECK(x,y,n)  - 1 if x and y are between 0 and n-1, 0 otherwise
        #define CHECK(x,y,n) ((x) >= 0 && (x) <= (n)-1 && (y) >= 0 && y <= (n)-1)
    b) MEDIAN(x,y,n) - Finds the median of x, y, z
        #define MEDIAN(x,y,z) ((x) > (y)) ? ((x) > (z) ? (z) : (x)) : ((y) > (z) ? (z) : (y)) 
    c) POLYNOMIAL(x) - computes 3x^5 + 2x^4 - 5x^3 - x^2 + 7x - 6
        #define POLYNOMIAL(x) (3 * ((x) * (x) * (x) * (x) * (x))) + \
                              (2 * ((x) * (x) * (x) * (x))) -       \
                              (5 * ((x) * (x) * (x))) -             \
                              (1 * ((x) * (x))) +                   \
                              (7 * (x)) - 6

10. What characteristics of a function would be unsuitable for a macro?
    Macros don't have type as they just expand whatever is defined in it, this can lead to some bugs
    where just making it a function instead would make it less error prone. Always having the need
    to use the '\' character can make the definition look a bit messy as well, forgetting to add
    them may cause bugs as well.

11. Write a macro that takes a format string and an item, which expands as (for example):
    fprintf(stderr, "Range error: index = %d\n", index);
    #define ERROR(s,i) fprintf(stderr, s, i);
Storage Class = SC, Type Qualifiers = TQ, Type Specifiers = TS, Declarators = D, Initializers = I
1.  a) static char **lookup(int level);
        SC: static
        TQ: N/A
        TS: char **
        D:  lookup
        I:  N/A
    b) volatile unsigned long io_flags;
        SC: auto (default)
        TQ: volatile
        TS: unsigned long
        D:  io_flags
        I:  N/A
    c) extern char *file_name[MAX_FILES], path[];
        SC: extern
        TQ: N/A
        TS: char *
        D:  file_nme[MAX_FILES], path[]
        I:  N/A
    d) static const char token_buf[] = "";
        SC: static
        TQ: const
        TS: char
        D:  token_buf[]
        I:  ""

2.  a) auto, extern
    b) auto, register, static
    c) static

3.  extern float a;

    void f(register double b)
    {
        static int c;
        auto char d;
    }

    a: automatic storage duration, file scope, external linkage
    b: static storage duration, block scope, no linkage
    c: static storage duration, file scope, internal linkage
    d: automatic storage duration, block scope, internal linkage

4.  int f(int i)
    {
        static int j = 0;
        return i * j++;
    }

    value of f(10) being called for the first time: 10 * 0 = 0
    value of f(10) after being called 5 times: 10 * 5 = 50

5.  a) Every variable with static duration has file scope.
        False - if a variable is static or extern within a function it is block scope.
    b) Every variable declared inside a function has no linkage.
        False - if the variable is extern then it may have external linkage.
    c) Every variable with internal linkage has static storage duration. 
        True  - when a variable is static, it is only allowed to be used in that file.
    d) Every parameter has block scope. 
        True  - all parameters are always relative to the function because they are only defined for the function.

6.  void print_error(const char *message)
    {
        int n = 1;
        printf("Error %d: %s\n", n++, message);
    }

    n should be static, resulting in the line being 'static int n = 1', then n will retain it's value
    each time print_error is called.

7.  a) If x is of type int, it can be used as the value of a case label in a switch statement. False
    b) The compiler will check that no assignment is made to x. True
    c) x is subject to the same scope rules as variables. True
    d) x can be of any type. True

8.  a) char (*x[10])(int);
        x is: an array of pointers to functions with an int parameter that returns a char
        1. array of
        2. pointers to
        3. functions with an int parameter
        4. that returns a char

    b) int (*x(int))[5];
        x is: a function with an int parameter that points to an array of type int
        1. a function with an int parameter
        2. that points to
        3. an array
        4. of type int
        
    c) float *(*x(void))(int);
        x is: a function with no arguments that points to a function with an int parameter returning pointer to float
        1. a function with no arguments
        2. that points to
        3. a function with an int parameter
        4. returning pointer to float

    d) void (*x(int, void (*y)(int)))(int);
        y is: a pointer to a function that has an int parameter that returns void
        1. a pointer to
        2. a function that has an int parameter
        3. that returns void
        x is: a function that has an int parameter and a pointer to y that points to a function with an int parameter that returns void
        1. a function that has an int parameter and a pointer to y
        2. that points to
        3. a function with an int parameter
        4. that returns void

9.  a) char (*x[10])(int);
        typedef char Func(int);
        typedef Func *Func_ptr;
        typedef Func_ptr Func_ptr_array[10];
        Func_ptr_array x;
    b) int (*x(int))[5];
        typedef int Arr[5];
        typedef Arr *Func_ptr; 
        typedef Func_ptr Func(int)
        Func x;
    c) float *(*x(void))(int);
        typedef float *Func(int);
        typedef Func *Func_ptr;
        typedef Func_ptr Func_ptr_Func(void);
        Func_ptr_Func x;
    d) void (*x(int, void (*y)(int)))(int);
        typedef void Func(int);
        typedef Func *Func_ptr;
        typedef void (*Func_y)(int);
        typedef Func_ptr Func_ptr_Func(int, Func_y)(int));
        Func_ptr_Func x;

10. a) p is a pointer to a function with a character pointer argument that returns a character pointer.
        char *(*p)(char *);
    b) f is a function with two arguments: p, a pointer to a structure with tag t, and n, a long integer, f returns a pointer to a function that has no arguments and returns nothing.
        void *f(struct t *p, long int n)(void);
    c) a is an array of four pointers to functions that have no arguments and return nothing. The elements of a initially point to functions named insert, search, update and print.
        void (*a[])(void) = {insert, search, update, print};
    d) b is an array of 10 pointers to functions with two int arguments that return structures with tag t.
        struct t (*b[10])(int, int);

11. int f(int)[];       // can't return array
        int *f(int);
    int g(int)(int);    // can't return function
        int (*g(int))(int);
    int a[10](int);     // can't functions as array elements
        int (*a(int))[10]; // first attempt, should be: int (*a[10])(int);

12. a) int (*f(float (*)(long), char *))(double);
        f is: a function
              that has two arguments - a pointer to a function with a long argument and returns a float
                                       a pointer to char
              that returns a pointer to
              a function with one double argument
              that returns an int

13. PI is a macro that represents 3.14159
    a) char c = 65;                                   legal
    b) static int i = 5, j = i * i;                   illegal
    c) double d = 2 * PI;                             legal
    d) double angles[] = {0, PI / 2, PI, 3 * PI / 2}; legal

14. Which kind of variable cannot be initialised?
    a) Array variables
    b) Enumeration variables
    c) Structure variables
    d) Union variables
    e) None of the above <-----

15. Which property of a variable determines whether or not it has a default initial value?
    a) Storage duration <-----
    b) Scope
    c) Linkage
    d) Type
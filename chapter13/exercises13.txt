1.  Which functions don't work with writing the '\n' character:
    a) printf("%c", '\n');  works
    b) printf("%c", "\n");  doesn't work, expected a char but given a string
    c) printf("%s", '\n');  doesn't work, expected a string but given a char
    d) printf("%s", "\n");  works
    e) printf('\n');        doesn't work, printf needs a string, not a char
    f) printf("\n");        works
    g) putchar('\n');       works
    h) putchar("\n");       doesn't work, putchar only works with chars
    i) puts('\n');          doesn't work, puts only works with strings
    j) puts("\n");          works
    k) puts("");            works

2.  Show the output and which of the following are legal and illegal for:
    char *p = "abc";
    a) putchar(p);      illegal, expected char but given a char pointer
    b) putchar(*p);     legal, output: a
    c) puts(p);         legal, output: abc
    d) puts(*p);        illegal, expected a string, but given a char

3.  What are the values of i (int), s (char *), j (int) from: scanf("%d%s%d", &i, s, &j);
    if the user put in: 12abc34 56def78
    i: 12, s: abc34, j: 56 

4.  int read_line(char str[], int n)
    {
        int ch, i = 0;

        while ((ch = getchar()) != '\n')
            if (i < n)
                str[i++] = ch;
        str[i] = '\0';
        return i;
    }
    Modify read_line to skip the whitespace at the beginning of the line
                        stop reading at the first white-space character
                        stop reading at the first newline character (and store it)
                        leave behind characters it can't store (break loop)

    int read_line(char str[], int n)
    {
        int ch, i = 0;
        bool stop_at_space = false;

        while ((ch = getchar()) != '\n')
        {
            if (stop_at_space && isspace(ch))
                break;
            else if (isspace(ch))
                continue;
            else if (i < n)
            {
                str[i++] = ch;
                stop_at_space = true;
            }
            else
                break;
        }

        str[i++] = '\n';
        str[i] = '\0';

        return i;
    }

5.  Write a function called 'capitalise' that converts all lowercase to uppercase.
    a) With array subscripting:
        void capitalise(char s[], int n)
        {
            int i;
            for (i = 0; i < n; i++)
                s[i] = toupper(s[i]);
        }

    b) With pointer arithmetic:
        void capitalise(char *s)
        {
            char *p;
            for (p = s; *p != '\0'; p++)
                *p = toupper(*p);
        }

6.  Write a function called censor where it replaces all instances of 'foo' with X's
    void censor(char *s, char *t)
    {
        char *p = t;
        int match = 0, length = 0;

        while (*p++ != '\0')
            length++;

        while (*s != '\0')
        {
            for (p = t, match = 0; *p != '\0'; p++)
                if (*(s+match) == *p)
                    match++;

            if (match == length)
                while (match-- > 0)
                    *s++ = 'X';
            else
                s++;
        }
    }

7.  str is an array of characters, which statement is not equivalent to the other three?
    a) *str = 0;
    b) str[0] = '\0';
    c) strcpy(str, "");
    d) strcat(str, "");

    'a' is not equivalent because it is setting the 0th element to 0 as an int, this does not add
    '\0' like the other statements.

8.  What is str after the statements:
    strcpy(str, "tire-bouchon");
    strcpy(&str[4], "d-or-wi');
    strcat(str, "red?");

    str: tire-bouchon
    str: tired-or-wi
    str: tired-or-wired?

9.  What is s1 after the statements:
    strcpy(s1, "computer");
    strcpy(s2, "science");
    if (strcmp(s1, s2) < 0)
        strcat(s1, s2);
    else
        strcat(s2, s1);
    s1[strlen(s1)-6] = '\0';

    s1: "computer"
    strcmp: s1 is less than s2
    s1: "computerscience"
    s1: "computer"

10. What's wrong with the function:
    char *duplicate(const char *p)
    {
        char *q;

        strcpy(q, p);
        return q;
    }

    the function is returning a local variable which gets deleted after the function runs.

11. Rewrite the following function to use pointer arithmetic:
    int strcmp(char *s, char *t)
    {
        int i;

        for (i = 0; s[i] == t[i]; i++)
            if (s[i] == '\0')
                return 0;
        return s[i] - t[i];
    }

    int strcmp(char *s, char *t)
    {
        for (; *s == *t; s++, t++)
            if (*s == '\0')
                return 0;
        return *s - *t;
    }

12. Write a function get_extension where it gets the file extension of a filename:
    void get_extension(const char *file_name, char *extension)
    {
        int location = 0;
        char *p;
        for (p = file_name; *p != '\0'; p++)
            if (*p == '.')
                location = strlen(file_name) - strlen(p);

        strcpy(extension, file_name+location+1);
    }

13. Write the function build_index_url where it adds "http://www." to the start of the string and
    "/index.html" to the end, and stores it in a string:

    void build_index_url(const char *domain, char *index_url)
    {
        strcpy(index_url, "http://www.");
        strcat(index_url, domain);
        strcat(index_url, "/index.html");
    }

14. What does the program print?

    #include <stdio.h>
    int main(void)
    {
        char s[] = "Hsjodi", *p;
        
        for (p = s; *p; p++)
            --*p;
        puts(s);
        return 0;
    }
    
    s: "Grinch"
    The program loops through the string "Hsjodi" and for each element it sets the element to itself,
    minus one, and loops until it hits the null character yielding 0.

15. The function 'f':
    int f(char *s, char *t)
    {
        char *p1, *p2;

        for (p1 = s; *p1; p1++)
        {
            for (p2 = t; *p2; p2++)
                if (*p1 == *p2) break;
            if (*p2 == '\0') break;
        }
        return p1 - s;
    }

    a) what is f("abcd", "babc")    3 was returned
    b) what is f("abcd", "bcd")     0 was returned
    c) what does f return in general?
        f sees if all elements in s are in t, then return how many from the start of s were in t

16. Reduce count_spaces from section 13.4:
    int count_spaces(const char *s)
    {
        int count = 0;

        for (; *s != '\0'; s++)
            if (*s == ' ')
                count++;
        return count;
    }

    int count_spaces(const char *s)
    {
        int count = 0;

        while (*s++)
            if (*s == ' ')
                count++;
        return count;
    }

17. Write the function test_extension which returns true if the given extension is in the given
    filename (not case-sensitive).

    bool test_extension(const char *file_name, const char *extension)
    {
        const char *p = file_name;

        while (*p++ != '.')
            ;
        while (toupper(*p++) && toupper(*extension++))
            ;
        return *extension == '\0' ? true : false;
    }

18. Write the function remove_filename, where it removes "/index.html" from a url:

    void remove_filename(char *url)
    {
        char *p = url+7;	// skip past the two slashes
        while (*p != '/')
            p++;
        *p = '\0';
    }
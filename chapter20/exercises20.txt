1.  i, j, k are unsigned shorts (0-65535)
    a)  i = 8; j = 9;
        printf("%d", i >> 1 + j >> 1);

        answer: (i >> (1 + j)) >> 1
                (8 >> (1 + 9)) >> 1
                (8 >> 10 >> 1)
                0 >> 1
                0
    b)  i = 1;
        printf("%d", i & ~i);

        answer: i & ~i
                1 & 65534
                0
    c)  i = 2; j = 1; k = 0;
        printf("%d", ~i & j ^ k);
        
        answer: ~i & j ^ k
                ~2 & 1 ^ 0
                65533 & 1 ^ 0
                1 ^ 0
                1

    d)  i = 7; j = 8; k = 9;
        printf("%d", i ^ j & k);

        answer: i ^ (j & k)
                7 ^ (8 & 9)
                7 ^ (8 & 9)
                7 ^ 8
                15

2.  Using the ~ operator, you can flip all bits, and using the << and >> operators you can toggle a bit
	int i = 78;
	unsigned short m = ((~(i >> 4) & 1) << 4) | (~0x10 & i);
    
	/*
		0000000000010101: 21
		0000000000000001: shift bit 4 to bit 0
		1111111111111110: flip all bits to toggle
		0000000000000000: & above with 1 to remove bits after bit 4
		0000000000000000: move the bit back to bit 4
		0000000000000101: & it with ~16

		0000000000000101: 5
		0000000000000000: get bit 4 to bit 0 
		1111111111111111: toggle bit
		0000000000000001: & above with 1
		0000000000010000: move to bit 4
		0000000000010101: | it with original number
	*/
1.  i, j, k are unsigned shorts (0-65535)
    a)  i = 8; j = 9;
        printf("%d", i >> 1 + j >> 1);

        answer: (i >> (1 + j)) >> 1
                (8 >> (1 + 9)) >> 1
                (8 >> 10 >> 1)
                0 >> 1
                0
    b)  i = 1;
        printf("%d", i & ~i);

        answer: i & ~i
                1 & 65534
                0
    c)  i = 2; j = 1; k = 0;
        printf("%d", ~i & j ^ k);
        
        answer: ~i & j ^ k
                ~2 & 1 ^ 0
                65533 & 1 ^ 0
                1 ^ 0
                1

    d)  i = 7; j = 8; k = 9;
        printf("%d", i ^ j & k);

        answer: i ^ (j & k)
                7 ^ (8 & 9)
                7 ^ (8 & 9)
                7 ^ 8
                15

2.  Using the ~ operator, you can flip all bits, and using the << and >> operators you can toggle a bit
	int i = 78;
	unsigned short m = ((~(i >> 4) & 1) << 4) | (~0x10 & i);
    
	/*
		0000000000010101: 21
		0000000000000001: shift bit 4 to bit 0
		1111111111111110: flip all bits to toggle
		0000000000000000: & above with 1 to remove bits after bit 4
		0000000000000000: move the bit back to bit 4
		0000000000000101: & it with ~16

		0000000000000101: 5
		0000000000000000: get bit 4 to bit 0 
		1111111111111111: toggle bit
		0000000000000001: & above with 1
		0000000000010000: move to bit 4
		0000000000010101: | it with original number
	*/

3.  #define M(x,y) ((x) ^= (y), (y) ^= (x), (x) ^= (y))
    The above swaps the values of x and y:
    int i = 5, j = 8;
    M(i, j);

    What happens:
    0000000000000101: 5 (x)
    0000000000001000: 8 (y)

    0000000000000101 ^
    0000000000001000
    ----------------
    0000000000001101: 13 (x ^= y)

    0000000000001101 ^
    0000000000001000
    ----------------
    0000000000000101: 5 (y ^= x)

    0000000000001101 ^
    0000000000000101
    ----------------
    0000000000001000: 8 (x ^= y)

4.  #define MK_COLOUR(r, g, b) ((0ul | r) << 16) | g << 8 | b
    example: 
	unsigned long colour = MK_COLOUR(254, 254, 254);
    makes: 
    0000000000000000000000000000000000000000111111101111111011111110 

5.  #define GET_RED(colour) (colour) >> 16 & 0xFF
    #define GET_GREEN(colour) (colour) >> 8 & 0xFF
    #define GET_BLUE(colour) (colour) & 0xFF

6.  a)  unsigned short swap_bytes(unsigned short i)
        {
            unsigned short j = i >> 8;
            unsigned short k = (i & 0xFF) << 8;
            return j | k;
        }

        unsigned short i;
        printf("Enter a hexadecimal number (up to four digits): ");
        scanf("%hx", &i);
        i = swap_bytes(i);
        printf("Number with bytes swapped: %hx\n", i);

    b)  unsigned short swap_bytes(unsigned short i)
        {
            return (i >> 8) | ((i & 0xFF) << 8);
        }

7.  unsigned int rotate_left(unsigned int i, int n)
    {
        return (i << n) | (i >> 32 - n);
    }

    unsigned int rotate_right(unsigned int i, int n)
    {
        return (i >> n) | (i << 32 - n);
    }

8.  unsigned int f(unsigned int i, int m, int n)
    {
        return (i >> (m + 1 - n)) & ~(~0 << n);
    }

    a) What is the value of: ~(~0 << n)
        11111111 11111111: ~0
        11111111 11110000: n = 4, shift to the left by 4
        00000000 00001111: flip all bits
    b) What does the function do?
        This function gets the bits from m to m-n, shifts them to fit in a n block from the right.
        Example:
            Below is the size of the block of bits:
              |-------|
            01010110 01111000

            Then this block is moved to the start of the int:
            00000000 01011001
                     |------|

9.  a)  int count_ones(unsigned char ch)
        {
            int i = 0;
            while (ch)
            {
                i += ch & 1;
                ch >>= 1;
            }

            return i;
        }

    b)  int count_ones2(unsigned char ch)
        {
            int count = 0;
            if (!ch)
                return 0;
            else if (ch & 1)
                count++;
            return count + count_ones2(ch >> 1);
        }

10. unsigned int reverse_bits(unsigned int n)
    {
        int max = 0;
        for (int i = 0; i < (int) sizeof(unsigned int) * 8; i++)
            if (n & 1 << i)
                max = i + 1;	// add one because to get bit 0 you shift it by 0 even though it is the first bit

        unsigned int new = 0;
        for (int i = 0; i <= max; i++)
            new |= (n & 1 << (max - i-1) ? 1 : 0) << i;

        return new;
    }

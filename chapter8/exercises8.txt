1.  It is inferior because if the type was changed, then in all occurances of the expression:
    sizeof(a) / sizeof(t)
    't' would need to be changed.

2.  To use a digit (char, eg: '1', '2', '3', etc.) as an array subscript, to 'scale' you must
    subtract '0'. The expression would be:
    a['1' - '0']
    that would get the first element as the ascii table depicts '1' as 49 and '0' as 48 hence being
    49 - 48 = 1

3.  The declaration would go as follows for c89:
    bool weekend[] = {true, false, false, false, false, false, false, true}

4.  The declaration would go as follows for c99:
    bool weekend[] = {[0] = true, [6] = true}

5.  Fibonacci sequence in 40 elements of an array:
	int fib[40] = {0}, x, y, z;
	x = 0, y = 1;
	for (int i = 0; i < (int) (sizeof(fib) / sizeof(fib[0])); i++)
	{
		fib[i] = x + y;
		z = x + y;
		x = y;
		y = z;
	}

6. Write zero to nine each as seven-segment displays, like, in an array:
    _           _             _
   | |    |     _|           |_|
   |_|    |    |_     ...     _|

    const int segments[10][7] = {{1, 1, 1, 1, 1, 1, 0},     // 0
                                 {0, 1, 1, 0, 0, 0, 0},     // 1
                                 {1, 1, 0, 1, 1, 0, 1},     // 2
                                 {1, 1, 1, 1, 0, 0, 1},     // 3
                                 {0, 1, 1, 0, 0, 1, 1},     // 4
                                 {1, 0, 1, 1, 0, 1, 1},     // 5
                                 {1, 0, 1, 1, 1, 1, 1},     // 6
                                 {1, 1, 1, 0, 0, 0, 0},     // 7
                                 {1, 1, 1, 1, 1, 1, 1},     // 8
                                 {1, 1, 1, 1, 0, 1, 1},     // 9
    };

7.  Shrink the segments array as much as you can:
    const int segments[10][7] = {{1, 1, 1, 1, 1, 1},        // 0
                                 {[1] = 1, 1},              // 1
                                 {1, 1, 0, 1, 1, 0, 1},     // 2
                                 {1, 1, 1, 1, [6] = 1},     // 3
                                 {0, 1, 1, [5] = 1, 1},     // 4
                                 {1, 0, 1, 1, 0, 1, 1},     // 5
                                 {1, 0, 1, 1, 1, 1, 1},     // 6
                                 {1, 1, 1},                 // 7
                                 {1, 1, 1, 1, 1, 1, 1},     // 8
                                 {1, 1, 1, 1, 0, 1, 1},     // 9
    };

8.  Two-dimensional array that contains a monthly temperature reading. 30 days (rows) and 24 hours
    for each day (columns):
    float temperature_readings[30][24];

9.  Write a fragment that calculates the average temperature for a month:
    float temperature_readings[30][24], d_average = 0.0f, m_average = 0.0f;
    for (int i = 0; i < (int)(sizeof(temperature_readings) / sizeof(temperature_readings[0])); i++)
    {
        for (int j = 0; j < (int)(sizeof(temperature_readings[i]) / sizeof(temperature_readings[i][0])); j++)
            d_average += temperature_readings[i][j];
        m_average += d_average / (int)(sizeof(temperature_readings[i]) / sizeof(temperature_readings[i][0]));
    }
    m_average /= (int)(sizeof(temperature_readings) / sizeof(temperature_readings[0]));

********************************************************
The following exercises use the macro:
    #define SIZE (int)(sizeof(board) / sizeof(board[0]))
********************************************************
    
10. Make an 8x8 chess board as chars (array declaration):
    #define SIZE (int)(sizeof(board) / sizeof(board[0]))
    char board[8][8] = {{'r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'},
						{'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'},
						{' ', '.', ' ', '.', ' ', '.', ' ', '.'},
						{'.', ' ', '.', ' ', '.', ' ', '.', ' '},
						{' ', '.', ' ', '.', ' ', '.', ' ', '.'},
						{'.', ' ', '.', ' ', '.', ' ', '.', ' '},
						{'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'},
						{'R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'}};

	for (int i = 0; i < SIZE; i++)
	{
		for (int j = 0; j < SIZE; j++)
			printf("%c ", a[i][j]);
		printf("\n");
	}

11. Make an 8x8 checker board and fill it with a loop:
	char board[8][8];
	for (int i = 0; i < SIZE; i++)
		for (int j = 0; j < SIZE; j++)
			board[i][j] = (i + j) % 2 == 0 ? 'B' : 'R';

	for (int i = 0; i < SIZE; i++)
	{
		for (int j = 0; j < SIZE; j++)
			printf("%c ", board[i][j]);
		printf("\n");
	}
1.  Binary or text data?
    a) Object code from a C compiler: Binary data
    b) Program listing from a C compiler: Text data
    c) Email sent from a computer: Text data
    d) A file containing a graphics image: Binary data

2.  a)  A database management system opens a file containing records to be updated. "rb+"
    b)  A mail program opens a file of saved messages so that it can add additional messages to the end. "a"
    c)  A graphics program opens a file containing a picture to be displayed on the screen. "rb"
    d)  An operating system command interpreter opens a "shell script" (or "batch file") containing commands to be executed. "r"

3.  FILE *fp;

    if (fp = fopen(filename, "r"))
    {
        *read characters until end-of-file*
    }
    fclose(fp);

    The following line contains an error:
        if (fp = fopen(filename, "r"))
    to fix it, check if the statement is not equal to NULL.

4.  Show howw the following will look with '%#012.5g' in printf:
    a) 83.7361          00000083.736
    b) 29748.6607       00000029749.
    c) 1054932234.0     001.0549e+09
    d) 0.0000235218     002.3522e-05

5.  Is there a difference between '%.4d' and '%04d'?
    No, both present the same results, eg:
    1 -> '%.4d': 0001
    1 -> '%04d': 0001

6.  printf("%d %s", wiget, wiget == 1 ? "wiget" : "wigets");

7.  n = scanf("%d%f%d", &i, &x, &j);
    a) "10 20 30"       i:10    j:30          n:3
    b) "1.0 2.0 3.0"    i:1     j:2           n:3
    c) "0.1 0.2 0.3"    i:0     j:0           n:3
    d) ".1 .2 .3"       i:21942 j:-1546538976 n:0
    
8.  scanf(" %c") vs scanf("%1s")
    Both give the same result, but " %c" matches a character, whereas "%1s" matches a string of length 1.
    A warning also comes from "%1s" if you give it a char to put the value in, it expects a char *.

9.  Which are not valid when reading a character from standard input:
    a) getch()      Invalid
    b) getchar()      Valid
    c) getc(stdin)    Valid
    d) fgetc(stdin)   Valid

10. fcopy.c has no error checking:
    if (ferror(fp))
    {
        fprintf(stderr, "An error has occured when copying from %s to %s\n", argv[1], argv[2]);
        fclose(source_fp);
        fclose(dest_fp);
        exit(EXIT_FAILURE);
    }

11. Turning:
    while ((ch = getc(source_fp)) != EOF)
    into:
    while (ch = getc(source_fp) != EOF)
    would result in while (ch = (getc(source_fp) != EOF))

    This means that ch will only be 0 or 1 because getc is being compared with EOF, resulting in
    either a true of false statement.

12. int count_periods(const char *filename)
    {
        FILE *fp;
        int ch, n = 0;

        if ((fp = fopen(filename, "r")) != NULL)
        {
            while ((ch = fgetc(fp)) != EOF)
            {
                if (ch == '.')
                    n++;
            }
            
            fclose(fp);
        }

        return n;
    }

13. int line_length(const char *filename, int n)
    {
        FILE *fp;
        int ch, i = 0, line = 1;

        if ((fp = fopen(filename, "r")) != NULL)
        {
            while ((ch = fgetc(fp)) != EOF)
            {
                if (ch == '\n')
                    line++;
                if (line == n)
                    i++;
            }

            fclose(fp);
        }

        return i-1;
    }

14. a)  char *cfgets(char * restrict s, int n, FILE * restrict stream)
        {
            int ch, i = 0;

            while ((ch = getc(stream)) != EOF && i < n-1)
            {
                s[i++] = ch;
                if (ch == '\n')
                    break;
            }

            if (i == 0 || ferror(stream))
                return NULL;

            s[i] = '\0';

            return s;
        }

    b)  int cfputs(const char * restrict s, FILE * restrict stream)
        {
            int i;
            for (i = 0; *s != '\0'; s++, i++)
            {
                if (s[i] == EOF)
                    return EOF;
                putc(*s, stream);
            }

            if (i == 0)
                return -1;

            return i;
        }
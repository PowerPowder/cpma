1.  One error is the missing type for the parameter 'height', and the other error is 'double product'
    which is not inside the curly braces.

2.  Function that checks if both x and y are between 0 and n-1:
    int check(int x, int y, int n)
    {
        if ((x >= 0) && (x <= n-1) &&
            (y >= 0) && (y <= n-1))
            return 1;
        return 0;
    }

3.  Function that gets the GCD of two integers:
    int gcd(int m, int n)
    {
        int r;
        
        while (n != 0)
        {
            r = m % n;
            m = n;
            n = r;
        }

        return m;
    }

4.  Function that returns the day of the year from 1 to 366
    int day_of_year(int month, int day, int year)
    {
        int days_in_months = 0, i;
        for (i = 1; i < month; i++)
        {
            switch (i)
            {
                case 2:
                    days_in_months += 28;
                    break;
                case 4: case 6: case 9: case 11:
                    days_in_months += 30;
                    break;
                default:
                    days_in_months += 31;
                    break;
            }
        }

        if (year % 4 == 0)
            days_in_months++;

        return days_in_months + day;
    }

5.  Function to check how many digits are in 'n'
    int num_digits(int n)
    {
        int digits = 0;
        while (n > 0)
        {
            n /= 10;
            digits++;
        }

        return digits;
    }

6.  Function to get the kth digit in n from the right
    int digit(int n, int k)
    {
        int a[10] = {0}, i = 0;
        while (n > 0)
        {
            a[i++] = n % 10;
            n /= 10;
        }

        if (k > i)
            return 0;

        return a[k-1];
    }

7.  All of the statements are legal, but ints and doubles are casted to their respective type.

8.  Valid function protoypes for a function that returns nothing and has a single double parameter.
    a) void f(double x);    - valid
    b) void f(double);      - valid
    c) void f(x);           - invalid, needs the type for the parameter
    d) f(double x);         - invalid, needs the return type of the function

9.  The output of the program would be: 'i = 1, j = 2'. The swap function doesn't work as intended
    because variables within function are only kept within the function.

10. a)  int largest(int n, int a[])
        {
            int largest = a[0];
            for (int i = 0; i < n; i++)
                if (a[i] > largest)
                    largest = a[i];

            return largest;
        }
    b)  double average(int n, int a[])
        {
            double total = 0;
            for (int i = 0; i < n; i++)
                total += a[i];

            return total / n;
        }
    c)  int positive(int n, int a[])
        {
            int pos = 0;
            for (int i = 0; i < n; i++)
                if (a[i] >= 0)
                    pos++;

            return pos;
        }

11. float compute_GPA(char grades[], int n)
    {
        float total;
        int i;
        for (i = 0; i < n; i++)
        {
            switch (grades[i])
            {
                case 'A':
                    total += 4.0f;
                    break;
                case 'B':
                    total += 3.0f;
                    break;
                case 'C':
                    total += 2.0f;
                    break;
                case 'D':
                    total += 1.0f;
                    break;
                case 'F':
                    total += 0.0f;
                    break;
            }
        }
        return total / n;
    }

12. double inner_product(double a[], double b[], int n)
    {
        double total = 0;
        for (int i = 0; i < n; i++)
            total += a[i] * b[i];

        return total;
    }

13. int evaluate_position(char board[8][8])
    {
        int white = 0, black = 0;

        for (int i = 0; i < 8; i++)
        {
            for (int j = 0; j < 8; j++)
            {
                switch (board[i][j])
                {
                    case 'Q':
                        white += 9;
                        break;
                    case 'R':
                        white += 5;
                        break;
                    case 'B':
                        white += 3;
                        break;
                    case 'N':
                        white += 3;
                        break;
                    case 'P':
                        white += 1;
                        break;
                    case 'q':
                        black += 9;
                        break;
                    case 'r':
                        black += 5;
                        break;
                    case 'b':
                        black += 3;
                        break;
                    case 'n':
                        black += 3;
                        break;
                    case 'p':
                        black += 1;
                        break;
                }
            }
        }
        return white - black;
    }
1.  Can the following be in the same program and work?
    struct { int x, y; } x;
    struct { int x, y; } y;

    Yes, they are legal on an individual basis, they are both separate despite the same members.
    They can both be in the same program too.

2.  a) Declare a struct for c1, c2, c3 which have real and imaginary type of doubles:
        struct {
            double real;
            double imaginary;
        } c1, c2, c3;
    b) Modify (a) for c1 to have 0.0 and 1.0, c2 to have 1.0 and 0.0, c3 not initialised:
        struct {
            double real;
            double imaginary;
        } c1 = {0.0, 1.0}, c2 = {1.0, 0.0}, c3;
    c) Write statements to copy c2 into c1:
        c1.real = c2.real;
        c2.imaginary = c2.imaginary;

        or it can be done as:
        c1 = c2;
    d) Write statements that add the members in c1 and c2, store them in c3:
        c3.real = c1.real + c2.real; 
        c3.imaginary = c1.imaginary + c2.imaginary;

3.  a)  struct complex {
            double imaginary;
            double real;
        };
    b)  struct complex c1, c2, c3;
    c)  struct complex make_complex(double imaginary, double real)
        {
            struct complex new;
            new.imaginary = imaginary;
            new.real = real;
            return new;
        }
    d)  struct complex add_complex(struct complex c1, struct complex c2)
        {
            struct complex new;
            new.imaginary = c1.imaginary + c2.imaginary;
            new.real = c1.real + c2.real;
            return new;
        }

4.  a)  typedef struct {
            double imaginary;
            double real;
        } Complex;
    b)  Complex c1, c2, c3;
    c)  Complex make_complex(double imaginary, double real)
        {
            Complex new;
            new.imaginary = imaginary;
            new.real = real;
            return new;
        }
    d)  Complex add_complex(Complex c1, Complex c2)
        {
            Complex new;
            new.imaginary = c1.imaginary + c2.imaginary;
            new.real = c1.real + c2.real;
            return new;
        }

5.  For the struct:
    struct date {
        int month, day, year;
    };

    a)  int day_of_year(struct date d)
        {
            int days_in_months = 0, i;
            for (i = 1; i < d.month; i++)
            {
                switch (i)
                {
                    case 2:
                        days_in_months += 28;
                        break;
                    case 4: case 6: case 9: case 11:
                        days_in_months += 30;
                        break;
                    default:
                        days_in_months += 31;
                        break;
                }
            }

            if (d.year % 4 == 0)
                days_in_months++;

            return days_in_months + d.day;
        }

    b)  int compare_dates(struct date d1, struct date d2)
        {
            if (day_of_year(d1) < day_of_year(d2))
                return -1;
            else if (day_of_year(d1) > day_of_year(d2))
                return 1;
            else
                return 0;
        }

6.  struct time {
        int hours, minutes, seconds;
    };

    struct time split_time(long total_seconds)
    {
        struct time t;

        t.hours = total_seconds / 3600;
        total_seconds -= t.hours * 60 * 60;

        t.minutes = total_seconds / 60;
        total_seconds -= t.minutes * 60;

        t.seconds = total_seconds;

        return t;
    }

7.  struct fraction {
        int numerator, denominator;
    };
    
    a)  struct fraction to_lowest(struct fraction f)
        {
            int r, m = f.numerator, n = f.denominator;
            
            while (n != 0)
            {
                r = m % n;
                m = n;
                n = r;
            }

            struct fraction new_fraction = {f.numerator / m, f.denominator / m};
            return new_fraction;
        }

    b)  struct fraction add_fractions(struct fraction f1, struct fraction f2)
        {
            struct fraction new_fraction;
            new_fraction.numerator = f1.numerator + f2.numerator;
            new_fraction.denominator = f1.denominator + f2.denominator;
            return to_lowest(new_fraction);
        }

    c)  struct fraction subtract_fractions(struct fraction f1, struct fraction f2)
        {
            struct fraction new_fraction;
            new_fraction.numerator = f1.numerator - f2.numerator;
            new_fraction.denominator = f1.denominator - f2.denominator;
            return to_lowest(new_fraction);
        }

    d)  struct fraction multiply_fractions(struct fraction f1, struct fraction f2)
        {
            struct fraction new_fraction;
            new_fraction.numerator = f1.numerator * f2.numerator;
            new_fraction.denominator = f1.denominator * f2.denominator;
            return to_lowest(new_fraction);
        }

    e)  struct fraction divide_fractions(struct fraction f1, struct fraction f2)
        {
            struct fraction new_fraction;
            new_fraction.numerator = f1.numerator / f2.numerator;
            new_fraction.denominator = f1.denominator / f2.denominator;
            return to_lowest(new_fraction);
        }

8.  struct colour {
        int red, green, blue;
    };

    a)  const struct colour MAGENTA = {255, 0, 255};
    b)  const struct colour MAGENTA = {.red = 255, .blue = 255};

9.  struct colour {
        int red, green, blue;
    };

    a)  struct colour make_colour(int red, int green, int blue)
        {
            if (red < 0)          red = 0;
            else if (red > 255)   red = 255;
            
            if (green < 0)        green = 0;
            else if (green > 255) green = 255;

            if (blue < 0)         blue = 0;
            else if (blue > 255)  blue = 255;

            struct colour c = {red, green blue};
            return colour;
        }

    b)  int struct colour get_red(struct colour c)
        {
            return c.red;
        }

    c)  bool struct equal_colour(struct colour c1, struct colour c2)
        {
            if (c1.red == c2.red && c1.green == c2.green && c1.blue == c2.blue) return true;
            return false;
        }

    d)  struct colour brighter(struct colour c)
        {
            struct colour new_c;
            int red = c.red;
            int green = c.green;
            int blue = c.blue;

            if (red == 0 && green == 0 && blue == 0)
            {
                new_c = {3, 3, 3};
                return new_c;
            }

            if (red   > 0 && red   < 3) red = 3;
            if (green > 0 && green < 3) green = 3;
            if (blue  > 0 && blue  < 3) blue = 3;

            red /= 0.7, green /= 0.7, blue /= 0.7;

            if (red > 255) red = 255;
            if (green > 255) green = 255;
            if (blue > 255) blue = 255;

            new_c = {red, green, blue};

            return new_c;
        }

    e)  struct colour darker(struct colour c)
        {
            struct colour new_c = {c.red * 0.7,
                                   c.green * 0.7,
                                   c.blue * 0.7};
            return new_c;
        }
1.  void *my_malloc(int n)
    {
        void *p = malloc(n);

        if (p == NULL)
        {
            printf("Error: allocation failed, space was not given for p");
            exit(EXIT_SUCCESS);
        }
        else
            return p;
    }

2.  char *duplicate(char *s)
    {
        char *t = malloc(strlen(s) + 1);
        strcpy(t, s);
        return t;
    }

3.  int *create_array(int n, int initial_value)
    {
        int *i, *a = malloc(n * sizeof(int));

        if (a == NULL)
            return NULL;

        for (i = a; i < a + n; i++)
            *i = initial_value;

        return a;
    }

4.  struct point { int x, y; }
    struct rectangle { struct point upper_left, lower_right; };
    struct rectangle *p;

	p = malloc(sizeof(struct rectangle));
	p->upper_left.x = 10;
	p->upper_left.y = 25;
	p->lower_right.x = 20;
	p->lower_right.y = 15;

5.  struct {
        union {
            char a, b;
            int c;
        } d;
        int e[5];
    } f, *p = &f;

    a) p->b = ' ';      illegal
    b) p->e[3] = 10;    legal
    c) (*p).d.a = '*';  legal
    d) p->d->c = 20;    illegal

7.  for (p = first; p != NULL; p = p->next)
        free(p);

    While p is not null, it deletes itself each iteration.

    struct node *temp;
    while (p != NULL)
    {
        temp = p;
        p = p->next;
        free(temp);
    }

8.  see stack.c

9.  True, (&x)->a is (*(&x)).a, &x gets the address of x, then * dereferences the address (pointer),
    so they both cancel each other leaving x.a

10. void print_part(struct part *p)
    {
        printf("Part number: %d\n", p->number);
        printf("Part name: %s\n", p->name);
        printf("Quantity on hand: %d\n", p->on_hand);
    }

11. int count_occurances(struct node *list, int n)
    {
        int count = 0;
        struct node *current = list;
        
        while (current != NULL)
        {
            if (n == current->value)
                count++;
            
            current = current->next;
        }

        return count;
    }

12. struct node *find_last(struct node *list, int n)
    {
        struct node *current = list;
        while (current != NULL)
        {
            if (current->value == n)
                return current;

            current = current->next;
        }

        return NULL;
    }

13. The function assumes that the order goes from highest to lowest, it can't insert a node at the
    end of the list, can't insert at the start of the list.

    To fix:
        Check if the value of the new node fits between the next node and the previous node (within range of them).
        Check if the value should be inserted as the last node on the list.
        Check if the current value is NULL and if so set the new node as the first.

14. void delete_from_list3(struct node **list, int n)
    {
        struct node *cur, *prev;

        for (cur = *list, prev = NULL; cur != NULL && cur->value != n; prev = cur, cur = cur->next)
            ;

        if (cur == NULL)
            return;
        if (prev == NULL)
            *list = (*list)->next;
        else
            prev->next = cur->next;

        free(cur);
        *list = prev;
    }

15. See lines 7-13 ex17.c, answer is 3

16. int sum(int (*f)(int), int start, int end)
    {
        int sum = 0;
        for (int i = start; i <= end; i++)
            sum += (*f)(i);
        return sum;
    }

17. int a[100] = {random values in here};
	qsort(a+50, 50, sizeof(int), compare_ints);
1.  void *my_malloc(int n)
    {
        void *p = malloc(n);

        if (p == NULL)
        {
            printf("Error: allocation failed, space was not given for p");
            exit(EXIT_SUCCESS);
        }
        else
            return p;
    }

2.  char *duplicate(char *s)
    {
        char *t = malloc(strlen(s) + 1);
        strcpy(t, s);
        return t;
    }

3.  int *create_array(int n, int initial_value)
    {
        int *i, *a = malloc(n * sizeof(int));

        if (a == NULL)
            return NULL;

        for (i = a; i < a + n; i++)
            *i = initial_value;

        return a;
    }

4.  struct point { int x, y; }
    struct rectangle { struct point upper_left, lower_right; };
    struct rectangle *p;

	p = malloc(sizeof(struct rectangle));
	p->upper_left.x = 10;
	p->upper_left.y = 25;
	p->lower_right.x = 20;
	p->lower_right.y = 15;

5.  struct {
        union {
            char a, b;
            int c;
        } d;
        int e[5];
    } f, *p = &f;

    a) p->b = ' ';      illegal
    b) p->e[3] = 10;    legal
    c) (*p).d.a = '*';  legal
    d) p->d->c = 20;    illegal

7.  for (p = first; p != NULL; p = p->next)
        free(p);

    While p is not null, it deletes itself each iteration.

    struct node *temp;
    while (p != NULL)
    {
        temp = p;
        p = p->next;
        free(temp);
    }

8.  see stack.c